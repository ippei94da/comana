#! /usr/bin/env ruby
# coding: utf-8

USAGE = <<HERE
machinestatus HostA HostB
machinestatus -g GroupA GroupB #-g option interprets as group name
HERE

require "pp"
require "optparse"
require "rubygems"
require "comana"
require "highline"

HIGHLINE = HighLine.new

##Analyze options
OPTIONS = {}
op = OptionParser.new
op.on("-a", "--ping-alive" , "Check only alive using ping"){OPTIONS[:ping]  = true}
op.on("-g", "--group"    , "Indicate group of hosts"    ){OPTIONS[:group] = true}
op.parse!(ARGV)


##Select hosts
mi = Comana::ClusterSetting.load_file
groups_settings = {}
mi.groups_settings.each do |key, val|
  cluster = key
  groups_settings[key] = val["members"]
end

hs = Comana::HostSelector.new groups_settings
#if OPTIONS[:all]
  #hosts = hs.select_all
#elsif OPTIONS[:group]
if OPTIONS[:group]
  hosts = []
  ARGV.each do |group|
    hosts << hs.select_group(group)
  end
  hosts.flatten!
else
  hosts = ARGV
end
hosts = hs.select_all if ARGV.empty?

#pp hosts;exit

##Collect information
Thread.abort_on_exception = true
results = {}
threads = {}
hosts.each do |host|
  threads[host] = Thread.start do
    if OPTIONS[:ping]
      ping = Comana::HostInspector::Ping.new host
      results[host] ||= {}
      results[host][:ping] = ping
    end
  end
end

threads.each do |host, thread|
  print "Waiting for #{host}...\n"
  thread.join              # wait until all processes are completed
end

##Show
results.keys.sort.each do |host|
  printf("%9s: ", host)
  if OPTIONS[:ping]
    state = HIGHLINE.color("dead", :red)
    state = "alive" if results[host][:ping].alive?
    printf("%5s", state)
  end
  puts
end
