#! /usr/bin/env ruby
# coding: utf-8

require "comana"
require "optparse"
require "pp"



#require "rubygems"
#require "highline"
#require "tefil"
#HIGHLINE = HighLine.new
#
##Analyze options
OPTIONS = {}
op = OptionParser.new
op.banner = [
    "Usage: #{File.basename("#{__FILE__}")}",
].join("\n")

#op.on("-a", "--ping-alive", "Check only alive using ping"){OPTIONS[:ping] = true}
#op.on("-t", "--top"       , "Info from top.     "){OPTIONS[:top     ] = true}
#op.on("-p", "--ps"        , "Info from ps.      "){OPTIONS[:ps      ] = true}
#op.on("-n", "--pbsnodes"  , "Info from pbsnodes."){OPTIONS[:pbsnodes] = true}
#op.on("-l", "--load"      , "Pbsnodes; state, loadave."){
#  OPTIONS[:pbsnodes] = true
#  OPTIONS[:load] = true
#}
op.on("-g", "--group"  , "Indicate group of hosts"    ){OPTIONS[:group] = true}
op.on("-q", "--quiet"  , "No output 'Wainting for...'"){OPTIONS[:quiet] = true}
op.parse!(ARGV)


##Select hosts
def target_hosts
  cs = Comana::ClusterSetting.load_file
  groups = {}
  cs.groups.each do |key, val|
    cluster = key
    groups[key] = val["members"]
  end
  hs = Comana::HostSelector.new groups
  if OPTIONS[:group]
    hosts = []
    ARGV.each do |group|
      begin
        hosts << hs.select_group(group)
      rescue Comana::HostSelector::NoEntryError
        $stderr.puts "Unknown group: #{group}"
      end
    end
    hosts.flatten!
  else
    hosts = ARGV
  end
  hosts = hs.select_all if ARGV.empty?
  hosts
end

pp hosts = target_hosts

###Collect information
#Thread.abort_on_exception = true
#results = {}
#threads = {}
#hosts.each do |host|
#  threads[host] = Thread.start do
#    results[host] = {}
#    if OPTIONS[:ping]
#      results[host][:ping] = Comana::HostInspector::Ping.new host
#    end
#    if OPTIONS[:pbsnodes]
#      begin
#        results[host][:pbsnodes] = Comana::HostInspector::Pbsnodes.new(host, cs.pbs_server)
#      rescue Comana::HostInspector::Pbsnodes::UnknownNodeError
#        #results[host][:pbsnodes] = Comana::HostInspector::Pbsnodes.new(host, cs.pbs_server)
#        results[host][:pbsnodes] = nil
#        #results[host][:pbsnodes]["status"] = {}
#      end
#    end
#  end
#end
#
#threads.each do |host, thread|
#  print "Waiting for #{host}...\n" unless OPTIONS[:quiet]
#  thread.join              # wait until all processes are completed
#end
#
###Titles
#titles = []
#titles << "host"
#if OPTIONS[:ping]
#  titles << "ping"
#end
#if OPTIONS[:pbsnodes]
#  titles << "state"
#  titles << "np"          unless OPTIONS[:load]
#  titles << "properties"  unless OPTIONS[:load]
#  titles << "ntype"       unless OPTIONS[:load]
#  titles << "gpus"        unless OPTIONS[:load]
#  titles << "rectime"     unless OPTIONS[:load]
#  titles << "varattr"     unless OPTIONS[:load]
#  titles << "jobs"
#  titles << "state"       unless OPTIONS[:load]
#  titles << "netload"     unless OPTIONS[:load]
#  titles << "gres"        unless OPTIONS[:load]
#  titles << "loadave"
#  titles << "ncpus"       unless OPTIONS[:load]
#  titles << "physmem"     unless OPTIONS[:load]
#  titles << "availmem"    unless OPTIONS[:load]
#  titles << "totmem"      unless OPTIONS[:load]
#  titles << "idletime"    unless OPTIONS[:load]
#  titles << "nusers"      unless OPTIONS[:load]
#  titles << "nsessions"   unless OPTIONS[:load]
#  titles << "sessions"    unless OPTIONS[:load]
#  titles << "uname"       unless OPTIONS[:load]
#  titles << "opsys"       unless OPTIONS[:load]
#end
#
###Data
#data = []
#results.keys.sort.each do |host|
#  items = [host]
#  #printf("%9s: ", )
#  #
#  if OPTIONS[:ping]
#    #state = HIGHLINE.color("dead", :red)
#    state = "dead"
#    state = "alive" if results[host][:ping].alive?
#    items << state
#    #sprintf("%5s", state)
#  end
#
#  if OPTIONS[:pbsnodes]
#    if results[host][:pbsnodes]
#      items << results[host][:pbsnodes].state
#      items << results[host][:pbsnodes].np                  unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].properties          unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].ntype               unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].gpus                unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["rectime"  ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["varattr"  ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["jobs"     ]                       
#      items << results[host][:pbsnodes].status["state"    ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["netload"  ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["gres"     ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["loadave"  ]                       
#      items << results[host][:pbsnodes].status["ncpus"    ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["physmem"  ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["availmem" ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["totmem"   ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["idletime" ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["nusers"   ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["nsessions"] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["sessions" ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["uname"    ] unless OPTIONS[:load] 
#      items << results[host][:pbsnodes].status["opsys"    ] unless OPTIONS[:load] 
#    else
#      items << "pbs_unknown_host"
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << ""                       
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << ""                       
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#      items << "" unless OPTIONS[:load] 
#
#    end
#  end
#  data << items
#end
#
#data = data.unshift(titles)
##pp data
#t = Tefil::ColumnFormer.new
#t.form(data, $stdout, "|")
